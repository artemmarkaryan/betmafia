import telebot
import threading
import back.tools
from back.tools import report
import back.payment
import admin.menu
import config.settings
from config.buttons import btn
from back.message import Msg
import forecast_sender

bot = back.tools.bot

fc_sender = threading.Thread(target=forecast_sender.poll)

timers = []


def null_func():
    pass


@bot.message_handler(regexp=btn['unsubscribe'])
def unsubscribe(m):
    print('m.chat.id', m.chat.id, 'unsubscribed')
    back.tools.set_(m.chat.id, 'users', 'subscribed', False)
    bot.send_message(m.chat.id, '‚úì –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')


@bot.message_handler(commands=['admin'])
def admin_(m):
    admin.menu.menu(m)


last_action = {}


@bot.message_handler(commands=['start'])
def msg2(m):
    report(action='start', chat_id=m.chat.id)

    if m.chat.id in config.settings.admins:
        admin.menu.menu(m)
        return

    if m.chat.id in last_action.keys() and last_action[m.chat.id] == 'start':
        return

    if back.tools.get('users', id_=m.chat.id) is None:
        back.tools.add_user(m.chat.id)
    else:
        Msg('msg_start_again').send(m.chat.id)
        return

    last_action[m.chat.id] = 'start'

    Msg('msg2').send(m.chat.id)
    timers.append(Msg('msg3').postpone(m.chat.id, ['msg2', ], timer=10))
    timers.append(Msg('msg6').postpone(m.chat.id, ['msg3', ], timer=600))
    timers.append(Msg('msg4').postpone(m.chat.id, ['msg3', 'msg6'], timer=24 * 3600))
    timers.append(Msg('msg5').postpone(m.chat.id, ['msg4', ], timer=2 * 24 * 3600))
    timers.append(Msg('msg7').postpone(m.chat.id, ['msg5', ], timer=2 * 24 * 3600 + 300))


# –û–ø—Ä–æ—Å –∏ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –æ—Ç—Ä–∞–±–æ—Ç–∫—É
@bot.message_handler(regexp=btn['survey'])
def survey1(m):

    for timer in timers:
        report(action='cancel timer', timer=timer.name)
        timer.cancel()

    Msg('msg12').send(m.chat.id, next_step=survey1_definer)
    timers.append(Msg('msg10').postpone(m.chat.id, ['msg12', ], timer=300))
    timers.append(Msg('msg_payment').postpone(m.chat.id, ['msg10'], timer=24 * 3600))


def survey1_definer(m):

    for timer in timers:
        report(action='cancel timer', timer=timer.name)
        timer.cancel()

    if m.text == '–î–∞':
        back.tools.set_(m.chat.id, 'users', 'question1', True)
        Msg('msg13').send(m.chat.id, next_step=survey2_definer)

    elif m.text == '–ù–µ—Ç':
        back.tools.set_(m.chat.id, 'users', 'question1', False)
        Msg('msg13').send(m.chat.id, next_step=survey2_definer)

    else:
        Msg('msg12').send(m.chat.id, next_step=survey1_definer)


def survey2_definer(m):

    if m.text == '–î–∞':
        back.tools.set_(m.chat.id, 'users', 'question2', True)
        Msg('msg14').send(m.chat.id, next_step=survey3_definer)

    elif m.text == '–ù–µ—Ç':
        back.tools.set_(m.chat.id, 'users', 'question2', False)
        Msg('msg14').send(m.chat.id, next_step=survey3_definer)

    else:
        Msg('msg13').send(m.chat.id, next_step=survey2_definer)


def survey3_definer(m):
    if m.text == '–î–∞':
        back.tools.set_(m.chat.id, 'users', 'question2', True)
    elif m.text == '–ù–µ—Ç':
        back.tools.set_(m.chat.id, 'users', 'question2', False)
    else:
        Msg('msg14').send(m.chat.id, next_step=survey3_definer)

    if back.tools.get('users', 'question1', m.chat.id):
        Msg('msg15').send(m.chat.id)

    else:
        Msg('msg16').send(m.chat.id)
        Msg('msg17').postpone(chat_id=m.chat.id,
                              previous_msg_title=['msg16', 'msg16.1'],
                              timer=10)

    #     –ó–µ–ª–µ–Ω–∞—è –∏ –∫—Ä–∞—Å–Ω–∞—è —Ä–∞–º–æ—á–∫–∞
    if not back.tools.get('users', 'video2', m.chat.id):
        timers.append(Msg('msg28').postpone(m.chat.id, ['msg15', 'msg17'], timer=24 * 3600))
        timers.append(Msg('msg29').postpone(m.chat.id, ['msg28'], timer=32 * 3600))
        timers.append(Msg('msg30').postpone(m.chat.id, ['msg15', 'msg17', ], timer=56 * 3600))
        timers.append(Msg('msg31').postpone(m.chat.id, ['msg30', ], timer=64 * 3600))
        timers.append(Msg('msg32').postpone(m.chat.id, ['msg31', ], timer=98 * 3600))
    timers.append(Msg('msg30').postpone(m.chat.id, ['msg15', 'msg17', ], timer=24 * 3600))
    timers.append(Msg('msg31').postpone(m.chat.id, ['msg30', ], timer=32 * 3600))
    timers.append(Msg('msg32').postpone(m.chat.id, ['msg31', ], timer=48 * 3600))


@bot.message_handler(regexp=btn['details'])
def starter(m):
    if m.chat.id in last_action.keys() and last_action[m.chat.id] == 'details':
            return
    else:
        last_action[m.chat.id] = 'details'
        payment(m)


@bot.message_handler(regexp=btn['buy forecast'])
def starter_(m):
    for timer in timers:
        report(action='cancel timer', timer=timer.name)
        timer.cancel()

    if m.chat.id in last_action.keys() and last_action[m.chat.id] == 'buy forecast':
        return
    else:
        last_action[m.chat.id] = 'buy forecast'
        payment(m)


@bot.message_handler(regexp=btn['yes'])
def msg_7_10_yes(m):
    if back.message.sent_dict[m.chat.id] == 'msg7':
        survey1(m)

    if back.message.sent_dict[m.chat.id] == 'msg10':
        Msg('msg17').send(m.chat.id)


# msg 7,10 -> no
@bot.message_handler(regexp=btn['no'])
def msg_7_10_no(m):
    if back.message.sent_dict[m.chat.id] == 'msg7' or back.message.sent_dict[m.chat.id] == 'msg10':
        Msg('msg9').send(m.chat.id, next_step=complaint)


def complaint(m):
    if len(m.text) < 5:
        Msg('msg9').send(m.chat.id, next_step=complaint)


@bot.message_handler(regexp=btn['pay1500'])  # –û–ø–ª–∞—Ç–∏—Ç—å 1500 –†–£–ë
def upsell(m):

    if m.chat.id in last_action.keys() and last_action[m.chat.id] == 'pay1500':
        return
    else:
        last_action[m.chat.id] = 'pay1500'

        back.tools.delete(m.chat.id, 'users', 'payment_id')

        btn1500 = telebot.types.InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ VIP 1500 —Ä—É–±.',
                                                     url=back.payment.generate_link(m.chat.id, 1500),
                                                     )
        btn2200 = telebot.types.InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å 2 –ø—Ä–æ–≥–Ω–æ–∑–∞ 2200 —Ä—É–±.',
                                                     url=back.payment.generate_link(m.chat.id, 2200),
                                                     )
        inline_markup_ = telebot.types.InlineKeyboardMarkup(row_width=1)
        inline_markup_.add(btn1500, btn2200)
        bot.send_message(m.chat.id,
                         text='''
üëçüèª <b>–û—Ç–ª–∏—á–Ω–æ! –í–∞—à VIP –ø—Ä–æ–≥–Ω–æ–∑ —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ</b>
–ù–∞ —Å–µ–≥–æ–¥–Ω—è –µ—Å—Ç—å –µ—â—ë —É–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã. –°–µ–π—á–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–∫—É–ø–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –ø—Ä–æ–≥–Ω–æ–∑ –∫ –≤–∞—à–µ–º—É —Å –±–æ–ª—å—à–æ–π —Å–∫–∏–¥–∫–æ–π!
–ò—Ç–æ–≥–æ: 1500+700(–≤–º–µ—Å—Ç–æ 1500)=2200 —Ä.
''',
                         reply_markup=inline_markup_,
                         parse_mode='HTML',
                         disable_notification=True)
        done_payment(m)


def done_payment(m):
    kb = telebot.types.InlineKeyboardMarkup()
    btn_agree = telebot.types.InlineKeyboardButton(
        text='–Ø –æ–ø–ª–∞—Ç–∏–ª',
        callback_data='p'+str(m.chat.id),
    )
    kb.add(btn_agree)

    text = '–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É ‚Üì'
    bot.send_message(m.chat.id, text, reply_markup=kb, parse_mode='html')


@bot.callback_query_handler(func=lambda query: ''.join(list(query.data)[0]) == 'p')
def payment_checker(query):
    data = query.data
    user_id = ''.join(list(data)[1:len(data)])

    payment_1500 = back.tools.get('users', 'payment_id', user_id)[0]
    payment_1500_status = back.tools.get('payments', 'success', payment_1500)
    report(action='check_payment', chat_id=query.message.chat.id, payment_1500=payment_1500_status)

    payment_2200 = back.tools.get('users', 'payment_id', user_id)[1]
    payment_2200_status = back.tools.get('payments', 'success', payment_2200)
    report(action='check_payment', chat_id=query.message.chat.id, payment_2200=payment_2200_status)
    try:

        if payment_1500_status is None and payment_2200_status is None:

            kb = telebot.types.InlineKeyboardMarkup()
            btn_agree = telebot.types.InlineKeyboardButton(
                text='–Ø –æ–ø–ª–∞—Ç–∏–ª',
                callback_data='p' + str(query.message.chat.id),
            )
            kb.add(btn_agree)
            text = '<b>‚úï –ü–ª–∞—Ç–µ–∂–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</b>\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—ã—à–µ'
            bot.edit_message_text(
                text,
                chat_id=query.message.chat.id,
                message_id=query.message.message_id,
                reply_markup=kb,
                parse_mode='html'
            )

        if payment_1500_status is False and payment_2200_status is False:
            kb = telebot.types.InlineKeyboardMarkup()
            btn_agree = telebot.types.InlineKeyboardButton(
                text='–Ø –æ–ø–ª–∞—Ç–∏–ª',
                callback_data='p' + str(query.message.chat.id),
            )
            kb.add(btn_agree)
            text = "<b>‚úï –ü–ª–∞—Ç—ë–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.</b>\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. " \
                   "\n–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @–Ω–∏–∫_–ø–æ–¥–¥–µ—Ä–∂–∫–∏"
            bot.edit_message_text(
                text,
                chat_id=query.message.chat.id,
                message_id=query.message.message_id,
                reply_markup=kb,
                parse_mode='html'
            )

        if payment_1500_status is True or payment_2200_status is True:
            text = "<b>‚úì –ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.</b>\n–ü—Ä–æ–≥–Ω–æ–∑—ã —Ä–∞—Å—Å—ã–ª–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 18:30. \n–°–∫–æ—Ä–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π!" \
                   "\n\n–ï—Å–ª–∏ –≤—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @–Ω–∏–∫_–ø–æ–¥–¥–µ—Ä–∂–∫–∏"
            bot.edit_message_text(
                text,
                chat_id=query.message.chat.id,
                message_id=query.message.message_id,
                parse_mode='html'
            )
    except:
        pass


@bot.message_handler(regexp=btn['pay'])  # –û–ø–ª–∞—Ç–∏—Ç—å, –ö—É–ø–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑
def payment(m):
    """
    —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ "–û–ø–ª–∞—Ç–∏—Ç—å"
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å 1500", "–û—Ç–∑—ã–≤—ã"
    """
    for timer in timers:
            report(action='cancel timer', timer=timer.name)
            timer.cancel()

    if m.chat.id in last_action.keys() and last_action[m.chat.id] == 'pay':
        return
    else:
        last_action[m.chat.id] = 'pay'

        Msg('msg_payment').send(m.chat.id)
        Msg('msg21').postpone(m.chat.id, previous_msg_title=['msg_payment', ], timer=3600)
        Msg('msg22').postpone(m.chat.id, previous_msg_title=['msg21', ], timer=3*3600)


@bot.message_handler(regexp=btn['feedbacks']) # –û—Ç–∑—ã–≤—ã
def feedback(m):
    last_action[m.chat.id] = 'feedbacks'
    Msg('msg_feedbacks').send(m.chat.id)
    payment(m)


@bot.message_handler(content_types=['text', 'photo'])
def a(m):
    if m.text in [
            btn['forecast'],
            btn['user amount'],
            btn['unsubscribed users'],
            btn['dispatch'],
            btn['direct message']
    ]:
        admin.menu.menu_definer(m)
    else:
        bot.send_message(m.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ')


bot.polling(interval=0.5, none_stop=False, timeout=120)
